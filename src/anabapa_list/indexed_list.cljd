(ns anabapa-list.indexed-list
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:scrollable_positioned_list/scrollable_positioned_list.dart" :as scroll-list :refer [ItemPosition]]
   ["package:mongol/mongol.dart" :as mgl]
   [anabapa-list.index-bar :as index-bar]
   [anabapa-list.data :as sample-data]
   [cljd.flutter.alpha2 :as f]))

(defn item-builder [items ctx i]
  (let [item (nth items i)
        sus-height 40]
    (if (= 0 (:idx item))
      (m/Column
       .mainAxisSize (.min m/MainAxisSize)
       .children
       [(m/Container
         .height sus-height
         .width (-> m/MediaQuery (.of ctx) .-size .-width)
         .padding (.only m/EdgeInsets .left 16)
         .color (m/Color 0xFFF3F4F5)
         .alignment (.centerLeft m/Alignment)
         .child (m/Text (:tag item)
                        .softWrap false
                        .style (m/TextStyle .fontSize 14
                                            .color (m/Color 0xFF666666))))
        (m/ListTile .title (m/Text (:name item)))])
      (m/ListTile .title (m/Text (:name item))))))

(defn positions-changed
  [^scroll-list/ItemPositionsListener 
   item-position-listner 
   state
   items]
  (let [^Iterable
        positions
        (-> item-position-listner
            .-itemPositions
            .-value)]
    (when (.-isNotEmpty positions)
      (let [^ItemPosition item-position
            (-> positions
                (.where (fn [^ItemPosition position] (> (.-itemTrailingEdge position) 0)))
                (.reduce
                 (fn [^ItemPosition min ^ItemPosition position]
                   (if (< (.-itemTrailingEdge position) (.-itemTrailingEdge min))
                     position
                     min))))
            i (.-index item-position)
            tag-temp (-> items (nth i) :tag)]
        (when (not= (:tag @state) tag-temp)
          (dart:core/print tag-temp)
          (swap! state assoc :tag tag-temp))))))

(defn indexed-list []
  (let [items (sample-data/convert-list)]
    ;; (dart:core/print (str "aaaaa" (count items)))
    (if (empty? items)
      (m/Container)
      (f/widget
       :context ctx
       :let [item-scroll-controller (scroll-list/ItemScrollController)
             item-position-listener (.create scroll-list/ItemPositionsListener)
             state (atom {:tag "A"})
             _ (-> item-position-listener
                   .-itemPositions
                   (.addListener 
                    #(positions-changed item-position-listener state items)))] 
       :bind {:item-num (count items)
              :item-scroll-controller item-scroll-controller
              :item-position-listener item-position-listener
              :items items
              :state state}
       (m/Container
        .width (-> m/MediaQuery (.of ctx) .-size .-width))
       .child
       (m/Stack
        .children
        [(.builder
          scroll-list/ScrollablePositionedList
          .itemCount (count items)
          .itemBuilder
          (fn [context index]
            (item-builder items context index))
          .itemScrollController item-scroll-controller
          .itemPositionsListener item-position-listener)
         (m/Align
          .alignment (.centerRight m/Alignment)
          .child (index-bar/index-bar))])))))